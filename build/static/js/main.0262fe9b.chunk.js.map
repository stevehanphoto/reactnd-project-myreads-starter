{"version":3,"sources":["BooksAPI.js","components/TitleHeader.js","components/BookCover.js","components/BookShelfChanger.js","components/Book.js","components/BooksGrid.js","components/BookShelf.js","components/HomePage.js","components/SearchPage.js","components/Page404.js","App.js","index.js"],"names":["api","token","localStorage","Math","random","toString","substr","headers","update","book","shelf","fetch","id","method","body","JSON","stringify","then","res","json","TitleHeader","className","to","BookCover","props","imageLinks","style","width","height","backgroundColor","textAlign","fontSize","color","verticalAlign","lineHeight","backgroundImage","thumbnail","BookShelfChanger","value","onChange","e","onShelfChange","target","disabled","Book","newShelf","handleShelfChange","title","authors","join","BooksGrid","books","map","key","BookShelf","showingBooks","filter","_","startCase","HomePage","SearchPage","state","query","updateQuery","setState","searchBook","getShelf","booksOnShelf","length","updatedBooks","oldBook","data","BooksAPI","booksWithShelfInfo","catch","err","console","log","resetSearch","this","type","placeholder","event","Component","Page404","BooksApp","isBookOnShelf","push","path","render","history","exact","React","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.0262fe9b.chunk.js","sourcesContent":["\r\nconst api = \"https://reactnd-books-api.udacity.com\"\r\n\r\n\r\n// Generate a unique token for storing your bookshelf data on the backend server.\r\nlet token = localStorage.token\r\nif (!token)\r\n  token = localStorage.token = Math.random().toString(36).substr(-8)\r\n\r\nconst headers = {\r\n  'Accept': 'application/json',\r\n  'Authorization': token\r\n}\r\n\r\nexport const get = (bookId) =>\r\n  fetch(`${api}/books/${bookId}`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.book)\r\n\r\nexport const getAll = () =>\r\n  fetch(`${api}/books`, { headers })\r\n    .then(res => res.json())\r\n    .then(data => data.books)\r\n\r\nexport const update = (book, shelf) =>\r\n  fetch(`${api}/books/${book.id}`, {\r\n    method: 'PUT',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ shelf })\r\n  }).then(res => res.json())\r\n\r\nexport const search = (query) =>\r\n  fetch(`${api}/search`, {\r\n    method: 'POST',\r\n    headers: {\r\n      ...headers,\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: JSON.stringify({ query })\r\n  }).then(res => res.json())\r\n    .then(data => data.books)\r\n","import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst TitleHeader = () => {\r\n    return (\r\n        <div className=\"list-books-title\">            \r\n            <Link to=\"/\"><h1>MyReads</h1></Link>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TitleHeader;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst BookCover = (props) => {\r\n    if (typeof (props.book.imageLinks) === 'undefined') {\r\n        return (\r\n            <div\r\n                className=\"book-cover\"\r\n                style={{\r\n                    width: 128, height: 193, backgroundColor: 'lightgrey',\r\n                    textAlign: 'center', fontSize: '1.4rem', color: 'grey',\r\n                    verticalAlign: 'middle', lineHeight: '193px'\r\n                }}\r\n            >\r\n                No Cover\r\n            </div>\r\n        )\r\n    }\r\n    else {\r\n        return (\r\n            <div\r\n                className=\"book-cover\"\r\n                style={{\r\n                    width: 128, height: 193,\r\n                    backgroundImage: `url(${props.book.imageLinks.thumbnail})`\r\n                }}\r\n            >\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nBookCover.propTypes = {\r\n    book: PropTypes.object.isRequired\r\n};\r\n\r\nexport default BookCover;\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nconst BookShelfChanger = (props) => {\r\n  return (\r\n    <div className=\"book-shelf-changer\">\r\n      <select value={\r\n          props.book.shelf ? props.book.shelf : 'none'} \r\n          onChange={(e) => props.onShelfChange(e.target.value)}\r\n      >\r\n        <option value=\"move\" disabled>Move to...</option>\r\n        <option value=\"currentlyReading\">Currently Reading</option>\r\n        <option value=\"wantToRead\">Want to Read</option>\r\n        <option value=\"read\">Read</option>\r\n        <option value=\"none\">None</option>\r\n      </select>\r\n    </div>\r\n  );\r\n}\r\n\r\nBookShelfChanger.propTypes = {\r\n  book: PropTypes.object.isRequired,\r\n  shelf: PropTypes.string,\r\n  onShelfChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default BookShelfChanger\r\n","import React from 'react';\r\nimport PropTypes from \"prop-types\";\r\nimport BookCover from \"./BookCover\";\r\nimport BookShelfChanger from \"./BookShelfChanger\";\r\n\r\nconst Book = (props) => {\r\n  return (\r\n    <div className=\"book\">\r\n      <div className=\"book-top\">\r\n        <BookCover book={props.book}/>\r\n        <BookShelfChanger \r\n          book={props.book} \r\n          onShelfChange={\r\n            (newShelf) => props.handleShelfChange(props.book, newShelf)} \r\n        />\r\n      </div>\r\n      <div className=\"book-title\">{props.book.title}</div>\r\n      <div className=\"book-authors\">{props.book.authors && props.book.authors.join(', ')}</div>\r\n    </div>\r\n  );  \r\n}\r\n\r\nBook.propTypes = {\r\n  book: PropTypes.object.isRequired,\r\n  handleShelfChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default Book","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Book from \"./Book\";\r\n\r\nconst BooksGrid = (props) => {\r\n  return (\r\n    <div className=\"bookshelf-books\">\r\n      <ol className=\"books-grid\">\r\n        {props.books.map(book => (\r\n          <li key={book.id}>\r\n            <Book book={book} handleShelfChange={\r\n              (book, newShelf) => props.handleShelfChange(book, newShelf)} />\r\n          </li>\r\n        ))}\r\n      </ol>\r\n    </div>\r\n  );\r\n}\r\n\r\nBooksGrid.propTypes = {\r\n  books: PropTypes.array.isRequired,\r\n  handleShelfChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default BooksGrid","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport _ from 'lodash'\r\nimport BooksGrid from './BooksGrid'\r\n\r\nconst BookShelf = (props) => {\r\n  const showingBooks = props.books.filter(book => book.shelf === props.shelf);\r\n  return (\r\n    <div>\r\n      <div className=\"bookshelf\">\r\n        <h2 className=\"bookshelf-title\">{_.startCase(props.shelf)}</h2>\r\n        <BooksGrid\r\n          books={showingBooks}\r\n          handleShelfChange={\r\n            (book, newShelf) => props.handleShelfChange(book, newShelf) }\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nBookShelf.propTypes = {\r\n  shelf: PropTypes.string.isRequired,\r\n  books: PropTypes.array.isRequired,\r\n  handleShelfChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default BookShelf;","import React from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from 'prop-types'\r\nimport TitleHeader from './TitleHeader';\r\nimport BookShelf from './BookShelf'\r\n\r\nconst HomePage = (props) => {\r\n    return (\r\n        <div className=\"list-books\">\r\n            <TitleHeader />\r\n            <div className=\"list-books-content\">\r\n                <div>\r\n                    <BookShelf\r\n                        shelf={\"currentlyReading\"}\r\n                        books={props.books}\r\n                        handleShelfChange=\r\n                            {(book, newShelf) => props.handleShelfChange(book, newShelf)}\r\n                    />\r\n                    <BookShelf\r\n                        shelf={\"wantToRead\"}\r\n                        books={props.books}\r\n                        handleShelfChange=\r\n                            {(book, newShelf) => props.handleShelfChange(book, newShelf)}\r\n                    />\r\n                    <BookShelf\r\n                        shelf={\"read\"}\r\n                        books={props.books}\r\n                        handleShelfChange=\r\n                            {(book, newShelf) => props.handleShelfChange(book, newShelf)}\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"open-search\">\r\n                <Link to=\"/search\">Add a book</Link>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nHomePage.propTypes = {\r\n    books: PropTypes.array.isRequired,\r\n    handleShelfChange: PropTypes.func.isRequired\r\n};\r\n\r\nexport default HomePage\r\n","import React, { Component } from 'react'\r\nimport { Link } from \"react-router-dom\";\r\nimport PropTypes from 'prop-types'\r\nimport * as BooksAPI from '../BooksAPI'\r\nimport BooksGrid from './BooksGrid'\r\n\r\nclass SearchPage extends Component {\r\n  static propTypes = {\r\n    booksOnShelf: PropTypes.array.isRequired,\r\n    handleShelfChange: PropTypes.func.isRequired\r\n  };\r\n  state = {\r\n    books: [],\r\n    query: \"\"\r\n  };\r\n  updateQuery = query => {\r\n    this.setState({ query: query });\r\n    this.searchBook(query);\r\n  }\r\n  getShelf = id => {\r\n    const book = this.props.booksOnShelf.filter((book) => book.id === id);\r\n    return book.length ? book[0].shelf : null;\r\n  };\r\n  searchBook(query) {\r\n    if (query && query.length > 0) {\r\n      BooksAPI.search(query)\r\n        .then(books => {\r\n          const booksWithShelfInfo = books.map(book => {\r\n            book.shelf = this.getShelf(book.id);\r\n            return book\r\n          });\r\n          this.setState({ books: booksWithShelfInfo });\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          this.resetSearch();\r\n        });\r\n    }\r\n    else {\r\n      this.resetSearch();\r\n    }\r\n  };\r\n  resetSearch() {\r\n    this.setState({ books: [] });\r\n  }\r\n  handleShelfChange = (book, newShelf) => {\r\n    const updatedBooks = this.state.books.map(oldBook => {\r\n      if (oldBook.id === book.id) {\r\n        oldBook.shelf = newShelf;\r\n      }\r\n      return oldBook\r\n    });\r\n    this.setState({ books: updatedBooks });\r\n\r\n    this.props.handleShelfChange(book, newShelf);\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"search-books\">\r\n        <div className=\"search-books-bar\">\r\n          <Link className=\"close-search\" to=\"/\">\r\n            Close\r\n          </Link>\r\n          <div className=\"search-books-input-wrapper\">\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Search by title or author\"\r\n              value={this.state.query}\r\n              onChange={event => this.updateQuery(event.target.value)}\r\n            />\r\n          </div>\r\n        </div>\r\n        <div className=\"search-books-results\">\r\n          <ol className=\"books-grid\"></ol>\r\n          {this.state.books && \r\n          <BooksGrid \r\n            books={this.state.books} \r\n            handleShelfChange={this.handleShelfChange}             \r\n          />}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default SearchPage","import React from 'react'\r\nimport TitleHeader from './TitleHeader';\r\n\r\nconst Page404 = () => {\r\n    return (\r\n        <div>\r\n            <TitleHeader />\r\n            <div className=\"message-404\">\r\n                <h1>404 - PAGE NOT FOUND</h1>\r\n            </div>\r\n        </div>\r\n    )\r\n} \r\n\r\nexport default Page404\r\n","import React from 'react'\r\nimport { Route, Switch } from \"react-router-dom\";\r\nimport * as BooksAPI from './BooksAPI'\r\nimport './App.css'\r\nimport HomePage from './components/HomePage'\r\nimport SearchPage from './components/SearchPage'\r\nimport Page404 from './components/Page404'\r\n\r\nclass BooksApp extends React.Component {\r\n  state = {\r\n    books: []\r\n  };\r\n  componentDidMount() {\r\n    BooksAPI.getAll().then(books => {\r\n      this.setState(() => ({\r\n        books\r\n      }));\r\n    });\r\n  }\r\n  handleShelfChange = (book, newShelf) => {\r\n    BooksAPI.update(book, newShelf);\r\n    let isBookOnShelf = false;\r\n    const updatedBooks = this.state.books.map(oldBook => {\r\n      if (oldBook.id === book.id) {\r\n        isBookOnShelf = true;\r\n        return { ...oldBook, shelf: newShelf };\r\n      }\r\n      return oldBook;\r\n    });\r\n    if (!isBookOnShelf) {\r\n      updatedBooks.push({...book, shelf: newShelf});\r\n    }\r\n    this.setState({ books: updatedBooks });\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"app\">\r\n        <Switch>\r\n          <Route\r\n            path=\"/search\"\r\n            render={({ history }) =>\r\n              <SearchPage booksOnShelf=\r\n                {this.state.books} handleShelfChange={this.handleShelfChange}\r\n              />}\r\n          />\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            render={() =>\r\n              <HomePage books=\r\n                {this.state.books} handleShelfChange={this.handleShelfChange} />\r\n            }\r\n          />\r\n          <Route render={() => <Page404 />} />\r\n        </Switch>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BooksApp\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { BrowserRouter } from 'react-router-dom'\r\nimport App from './App';\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n    <BrowserRouter>\r\n        <App />\r\n    </BrowserRouter>, document.getElementById(\"root\"));"],"sourceRoot":""}